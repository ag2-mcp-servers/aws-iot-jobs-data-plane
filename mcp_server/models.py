# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:03:03+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class ApproximateSecondsBeforeTimedOut(RootModel[int]):
    root: int


class CertificateValidationException(RootModel[Any]):
    root: Any


class DescribeJobExecutionJobId(RootModel[constr(pattern=r'[a-zA-Z0-9_-]+|^\$next')]):
    root: constr(pattern=r'[a-zA-Z0-9_-]+|^\$next')


class DescribeJobExecutionRequest(BaseModel):
    pass


class DetailsKey(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class DetailsValue(
    RootModel[constr(pattern=r'[^\p\{C\}]*\+', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'[^\p\{C\}]*\+', min_length=1, max_length=1024)


class ExecutionNumber(RootModel[int]):
    root: int


class ExpectedVersion(RootModel[int]):
    root: int


class GetPendingJobExecutionsRequest(BaseModel):
    pass


class IncludeExecutionState(RootModel[bool]):
    root: bool


class IncludeJobDocument(RootModel[bool]):
    root: bool


class InvalidRequestException(RootModel[Any]):
    root: Any


class InvalidStateTransitionException(RootModel[Any]):
    root: Any


class JobDocument(RootModel[constr(max_length=32768)]):
    root: constr(max_length=32768)


class JobExecutionStatus(Enum):
    QUEUED = 'QUEUED'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'
    REJECTED = 'REJECTED'
    REMOVED = 'REMOVED'
    CANCELED = 'CANCELED'


class JobId(RootModel[constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=64)]):
    root: constr(pattern=r'[a-zA-Z0-9_-]+', min_length=1, max_length=64)


class LastUpdatedAt(RootModel[int]):
    root: int


class QueuedAt(RootModel[int]):
    root: int


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class StartedAt(RootModel[int]):
    root: int


class StepTimeoutInMinutes(RootModel[int]):
    root: int


class TerminalStateException(RootModel[Any]):
    root: Any


class ThingName(
    RootModel[constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9:_-]+', min_length=1, max_length=128)


class ThrottlingException(RootModel[Any]):
    root: Any


class VersionNumber(RootModel[int]):
    root: int


class ThingsThingNameJobsNextPutRequest(BaseModel):
    statusDetails: Optional[Dict[str, DetailsValue]] = Field(
        None,
        description='A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.',
    )
    stepTimeoutInMinutes: Optional[int] = Field(
        None,
        description='Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in field <code>stepTimeoutInMinutes</code>) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).',
    )


class Status(Enum):
    QUEUED = 'QUEUED'
    IN_PROGRESS = 'IN_PROGRESS'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'
    REJECTED = 'REJECTED'
    REMOVED = 'REMOVED'
    CANCELED = 'CANCELED'


class ThingsThingNameJobsJobIdPostRequest(BaseModel):
    executionNumber: Optional[int] = Field(
        None,
        description='Optional. A number that identifies a particular job execution on a particular device.',
    )
    expectedVersion: Optional[int] = Field(
        None,
        description='Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)',
    )
    includeJobDocument: Optional[bool] = Field(
        None,
        description='Optional. When set to true, the response contains the job document. The default is false.',
    )
    includeJobExecutionState: Optional[bool] = Field(
        None,
        description='Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.',
    )
    status: Status = Field(
        ...,
        description='The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.',
    )
    statusDetails: Optional[Dict[str, DetailsValue]] = Field(
        None,
        description=' Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.',
    )
    stepTimeoutInMinutes: Optional[int] = Field(
        None,
        description='Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).',
    )


class DetailsMap(RootModel[Optional[Dict[str, DetailsValue]]]):
    root: Optional[Dict[str, DetailsValue]] = None


class JobExecution(BaseModel):
    approximateSecondsBeforeTimedOut: Optional[ApproximateSecondsBeforeTimedOut] = None
    executionNumber: Optional[ExecutionNumber] = None
    jobDocument: Optional[JobDocument] = None
    jobId: Optional[JobId] = None
    lastUpdatedAt: Optional[LastUpdatedAt] = None
    queuedAt: Optional[QueuedAt] = None
    startedAt: Optional[StartedAt] = None
    status: Optional[JobExecutionStatus] = None
    statusDetails: Optional[DetailsMap] = None
    thingName: Optional[ThingName] = None
    versionNumber: Optional[VersionNumber] = None


class JobExecutionState(BaseModel):
    status: Optional[JobExecutionStatus] = None
    statusDetails: Optional[DetailsMap] = None
    versionNumber: Optional[VersionNumber] = None


class JobExecutionSummary(BaseModel):
    executionNumber: Optional[ExecutionNumber] = None
    jobId: Optional[JobId] = None
    lastUpdatedAt: Optional[LastUpdatedAt] = None
    queuedAt: Optional[QueuedAt] = None
    startedAt: Optional[StartedAt] = None
    versionNumber: Optional[VersionNumber] = None


class JobExecutionSummaryList(RootModel[List[JobExecutionSummary]]):
    root: List[JobExecutionSummary]


class StartNextPendingJobExecutionRequest(BaseModel):
    statusDetails: Optional[DetailsMap] = None
    stepTimeoutInMinutes: Optional[StepTimeoutInMinutes] = None


class StartNextPendingJobExecutionResponse(BaseModel):
    execution: Optional[JobExecution] = None


class UpdateJobExecutionRequest(BaseModel):
    executionNumber: Optional[ExecutionNumber] = None
    expectedVersion: Optional[ExpectedVersion] = None
    includeJobDocument: Optional[IncludeJobDocument] = None
    includeJobExecutionState: Optional[IncludeExecutionState] = None
    status: JobExecutionStatus
    statusDetails: Optional[DetailsMap] = None
    stepTimeoutInMinutes: Optional[StepTimeoutInMinutes] = None


class UpdateJobExecutionResponse(BaseModel):
    executionState: Optional[JobExecutionState] = None
    jobDocument: Optional[JobDocument] = None


class DescribeJobExecutionResponse(BaseModel):
    execution: Optional[JobExecution] = None


class GetPendingJobExecutionsResponse(BaseModel):
    inProgressJobs: Optional[JobExecutionSummaryList] = None
    queuedJobs: Optional[JobExecutionSummaryList] = None
